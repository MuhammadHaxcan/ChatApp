<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

  <style>
    /* Adjustments for container layout */
    .groups-container {
      display: flex;
      flex-direction: row;
      gap: 20px;
      min-height: 80vh;
      padding: 20px;
    }
    /* For group list */
    .groups-list {
      flex: 2;
      max-height: 80vh;
      overflow-y: auto;
    }
    .groups-list .card {
      margin-bottom: 15px;
    }
    .group-item {
      cursor: pointer;
      padding: 15px;
      transition: background-color 0.2s ease-in-out;
    }
    .group-item:hover {
      background-color: #f1f1f1;
    }
    /* For group form */
    .create-group-form {
      flex: 1;
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 20px;
    }
    /* Alert message */
    .alert {
      display: none;
      margin-top: 15px;
    }
    /* For better spacing on mobile */
    @media (max-width: 768px) {
      .groups-container {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container mt-4">
    <h1 class="mb-4 text-center"><%= title %></h1>
    <div class="groups-container">
      <!-- Joined Groups List -->
      <div class="groups-list">
        <h4 class="mb-3">Joined Groups</h4>
        <% if (groups.length > 0) { %>
          <% groups.forEach(group => { %>
            <div class="card group-item" data-group-id="<%= group._id %>">
              <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                  <h5 class="card-title"><%= group.name %></h5>
                  <p class="card-text"><small><%= group.description %></small></p>
                </div>
                <% if (group.admins.some(admin => admin._id.toString() === user._id.toString())) { %>
                  <button class="btn btn-danger delete-group-btn" data-group-id="<%= group._id %>">Delete Group</button>
                <% } %>
              </div>
            </div>
          <% }) %>
        <% } else { %>
          <div class="card">
            <div class="card-body">
              <p class="card-text">You have not joined any groups.</p>
            </div>
          </div>
        <% } %>
      </div>

      

      <!-- Create Group Form -->
      <div class="create-group-form card shadow-sm">
        <h4 class="card-header">Create New Group</h4>
        <div class="card-body">
          <div id="message" class="alert" role="alert"></div>
          <form id="createGroupForm">
            <div class="form-group">
              <label for="groupName">Group Name</label>
              <input type="text" id="groupName" class="form-control" placeholder="Enter group name" required />
            </div>
            <div class="form-group">
              <label for="groupDescription">Group Description</label>
              <textarea id="groupDescription" class="form-control" rows="3" placeholder="Enter group description"></textarea>
            </div>
            <div class="form-group">
              <label for="groupCategory">Category</label>
              <select id="groupCategory" class="form-control" required>
                <option value="">Select Category</option>
                <% categories.forEach(category => { %>
                  <option value="<%= category.name %>"><%= category.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="form-group">
              <label for="invitedUsers">Invite Users (comma-separated usernames)</label>
              <input type="text" id="invitedUsers" class="form-control" placeholder="Enter usernames to invite" />
            </div>
            <button type="submit" class="btn btn-primary w-100">Create Group</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('createGroupForm');
      const messageDiv = document.getElementById('message');

      // Form submission handler
      form.addEventListener('submit', async function(event) {
        event.preventDefault();

        // Gather form data
        const groupName = document.getElementById('groupName').value.trim();
        const groupDescription = document.getElementById('groupDescription').value.trim();
        const groupCategory = document.getElementById('groupCategory').value;
        const invitedUsersInput = document.getElementById('invitedUsers').value.trim();
        const invitedUsers = invitedUsersInput ? invitedUsersInput.split(',').map(user => user.trim()) : [];

        // Validate form data
        if (!groupName || !groupCategory) {
          showMessage('Group name and category are required.', 'danger');
          return;
        }

        // Create the payload
        const payload = {
          name: groupName,
          description: groupDescription,
          category: groupCategory,
          invitedUsers
        };

        try {
          // Send form data to the server
          const response = await fetch('/group/createGroup', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });

          if (response.ok) {
            // Show success message and reload the page to update the groups list
            showMessage('Group created successfully', 'success');
            setTimeout(() => window.location.reload(), 1500);
          } else {
            const errorData = await response.json();
            showMessage('Failed to create group: ' + (errorData.msg || 'Please try again.'), 'danger');
          }
        } catch (error) {
          showMessage('Failed to create group. Please try again.', 'danger');
        }
      });

      // Function to show alert messages
      function showMessage(message, type) {
        messageDiv.className = 'alert alert-' + type;
        messageDiv.textContent = message;
        messageDiv.style.display = 'block';

        // Hide the message after 3 seconds
        setTimeout(() => {
          messageDiv.style.display = 'none';
        }, 3000);
      }

      // Delete Group functionality
      document.querySelectorAll('.delete-group-btn').forEach(button => {
        button.addEventListener('click', async function() {
          const groupId = this.getAttribute('data-group-id');
          const confirmDelete = confirm('Are you sure you want to delete this group?');
          if (!confirmDelete) return;

          try {
            const response = await fetch(`/group/deleteGroup/${groupId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              }
            });

            if (response.ok) {
              showMessage('Group deleted successfully', 'success');
              setTimeout(() => window.location.reload(), 1500);
            } else {
              const errorData = await response.json();
              showMessage('Failed to delete group: ' + errorData.msg, 'danger');
            }
          } catch (error) {
            showMessage('Failed to delete group. Please try again.', 'danger');
          }
        });
      });
    });
  </script>
</body>
</html>
