<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">

  <style>
    .chat-container {
      display: flex;
      flex-direction: column;
      height: 70vh;
    }
    .chat-wrapper {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    .online-users {
      width: 100%;
      max-width: 300px;
      border-right: 1px solid #ddd;
      overflow-y: auto;
    }
    .chat-area {
      flex: 1;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      padding: 10px;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      border-bottom: 1px solid #ddd;
      max-height: calc(100vh - 200px); /* Adjust for layout responsiveness */
    }
    .chat-input {
      padding: 10px;
      border-top: 1px solid #ddd;
      background-color: #f8f9fa;
    }
    .online-users-label {
      display: none;
      padding: 10px;
      background-color: #f8f9fa;
      border-bottom: 1px solid #ddd;
      cursor: pointer;
    }
    @media (max-width: 768px) {
      .online-users {
        display: none;
      }
      .online-users-label {
        display: block;
      }
      .chat-wrapper {
        flex-direction: column;
      }
      .chat-area {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <div class="container mt-4">
    <h1><%= title %></h1>
    <div class="chat-container">
      <div class="chat-wrapper">
        <!-- Friends Sidebar -->
        <div class="online-users p-3">
          <h4>Friends</h4>
          <ul class="list-group">
            <% if (friends.length > 0) { %>
              <% friends.forEach(friend => { %>
                <li class="list-group-item friend-item" data-friend-id="<%= friend._id %>">
                  <%= friend.username %>
                </li>
              <% }) %>
            <% } else { %>
              <li class="list-group-item">No friends available</li>
            <% } %>
          </ul>
        </div>
        <!-- Chat Area -->
        <div class="chat-area">
          <div class="online-users-label" id="toggleFriends">
            Friends
          </div>
          <div class="chat-messages">
            <!-- Chat messages will be populated dynamically -->
          </div>
          <div class="chat-input">
            <form id="chatForm">
              <div class="form-group mb-0">
                <input type="text" id="messageInput" class="form-control" placeholder="Type your message here..." />
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const userId = "<%= user._id %>"; // Ensure userId is available in the context
      const chatMessagesDiv = document.querySelector('.chat-messages');
      const chatForm = document.getElementById('chatForm');
      const messageInput = document.getElementById('messageInput');
      let activeFriendId = null; // To track the currently selected friend

      const socket = io(); // Initialize Socket.io

      // Join the room as soon as the client connects
      socket.emit('joinRoom', userId);

      // Handle socket connection errors
      socket.on('connect_error', (err) => {
          console.error('Socket connection error:', err);
      });

      function generateChatUrl(endpoint, friendId) {
          return `/chat/${endpoint}/${userId}/${friendId}`;
      }

      async function loadMessages(friendId) {
          try {
              const chatUrl = generateChatUrl('getmessages', friendId);
              const response = await fetch(chatUrl);

              if (!response.ok) throw new Error('Failed to fetch messages.');

              const messages = await response.json();
              chatMessagesDiv.innerHTML = ''; // Clear previous messages
              messages.forEach(msg => {
                  const messageElement = document.createElement('div');
                  messageElement.classList.add('message', 'mb-2');
                  messageElement.innerHTML = `<strong>${msg.sender.username}:</strong> ${msg.text}`;
                  chatMessagesDiv.appendChild(messageElement);
              });

              activeFriendId = friendId; // Set the active friend ID
              scrollToBottom(); // Scroll to the bottom after loading messages
          } catch (error) {
              console.error('Error loading messages:', error);
          }
      }

      chatForm.addEventListener('submit', function (e) {
          e.preventDefault();
          const text = messageInput.value.trim();
          if (!text || !activeFriendId) return;

          // Emit the message to the server
          socket.emit('sendMessage', {
              text,
              senderId: userId,
              receiverId: activeFriendId
          });

          messageInput.value = ''; // Clear the input field after sending
      });

      // Function to scroll to the latest message
      function scrollToBottom() {
          chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
      }

      // Listen for incoming messages
      socket.on('messageReceived', (message) => {
          const messageElement = document.createElement('div');
          messageElement.classList.add('message', 'mb-2');
          messageElement.innerHTML = `<strong>${message.sender.username}:</strong> ${message.text}`;
          chatMessagesDiv.appendChild(messageElement);
          scrollToBottom(); // Scroll to the bottom when a new message arrives
      });

      document.querySelectorAll('.friend-item').forEach(item => {
          item.addEventListener('click', function () {
              document.querySelectorAll('.friend-item').forEach(friend => friend.classList.remove('active'));
              this.classList.add('active');
              const friendId = this.getAttribute('data-friend-id');
              loadMessages(friendId);
          });
      });

      // Toggle friends dropdown on smaller screens
      const toggleFriends = document.getElementById('toggleFriends');
      toggleFriends.addEventListener('click', function () {
          const onlineUsers = document.querySelector('.online-users');
          onlineUsers.style.display = onlineUsers.style.display === 'block' ? 'none' : 'block';
      });
  });

  </script>
</body>
</html>